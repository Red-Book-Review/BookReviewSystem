import os
import datetime
import bcrypt
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, Float, Date, text
from sqlalchemy.orm import declarative_base, sessionmaker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DATABASE_URL = os.getenv("DB_EXTERNAL_DATABASE_URL")

if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
Base = declarative_base()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
class Editor(Base):
    __tablename__ = "editors"
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password_hash = Column(String(128), nullable=False)

class Review(Base):
    __tablename__ = "reviews"
    id = Column(Integer, primary_key=True)
    title = Column(String(200))
    author = Column(String(200))
    evaluator = Column(String(50))
    genre = Column(String(50))
    idea = Column(Integer)
    style = Column(Integer)
    plot = Column(Integer)
    emotion = Column(Integer)
    influence = Column(Integer)
    final_score = Column(Float)
    review_date = Column(Date)
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
    idea_reason = Column(String(500))
    style_reason = Column(String(500))
    plot_reason = Column(String(500))
    emotion_reason = Column(String(500))
    influence_reason = Column(String(500))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    Base.metadata.create_all(engine)
    migrate_reviews_table()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã reviews (–µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def migrate_reviews_table():
    with engine.connect() as conn:
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS idea_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS style_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS plot_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS emotion_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS influence_reason VARCHAR(500);"))
        conn.commit()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
def view_reviews():
    session = Session()
    reviews = session.query(Review).all()
    if not reviews:
        print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.")
    else:
        for review in reviews:
            print(f"\nüìñ {review.title} ({review.author}) - {review.genre}")
            print(f"–û—Ü–µ–Ω–∫–∞: {review.final_score}/100")
            print(f"–û—Ü–µ–Ω–∏–ª: {review.evaluator} | –î–∞—Ç–∞: {review.review_date}")
    session.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
def register_editor():
    session = Session()
    username = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω: ").strip()
    password = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
    password_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    new_editor = Editor(username=username, password_hash=password_hash)
    session.add(new_editor)
    try:
        session.commit()
        print("‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        session.rollback()
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e)
    session.close()

# –í—Ö–æ–¥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
def login_editor(username, password):
    session = Session()
    editor = session.query(Editor).filter_by(username=username).first()
    if editor and bcrypt.checkpw(password.encode(), editor.password_hash.encode()):
        session.close()
        return True
    session.close()
    return False
