import os, datetime, bcrypt
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, Float, Date, text
from sqlalchemy.orm import declarative_base, sessionmaker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DATABASE_URL = os.getenv("DB_EXTERNAL_DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    exit(1)

engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
Base = declarative_base()

class Editor(Base):
    __tablename__ = "editors"
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password_hash = Column(String(128), nullable=False)

class Review(Base):
    __tablename__ = "reviews"
    id = Column(Integer, primary_key=True)
    title = Column(String(200))
    author = Column(String(200))
    evaluator = Column(String(50))
    genre = Column(String(50))
    idea = Column(Integer)
    style = Column(Integer)
    plot = Column(Integer)
    emotion = Column(Integer)
    influence = Column(Integer)
    final_score = Column(Float)
    review_date = Column(Date)
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–∏—á–∏–Ω –æ—Ü–µ–Ω–æ–∫
    idea_reason = Column(String(500))
    style_reason = Column(String(500))
    plot_reason = Column(String(500))
    emotion_reason = Column(String(500))
    influence_reason = Column(String(500))

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
class DeletedReview(Base):
    __tablename__ = "deleted_reviews"
    id = Column(Integer, primary_key=True)
    review_id = Column(Integer)
    deletion_reason = Column(Integer, nullable=True)  # 1,2,3 –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
    deletion_date = Column(Date, default=datetime.date.today)

def create_tables():
    Base.metadata.create_all(engine)
    migrate_reviews_table()

def migrate_reviews_table():
    with engine.connect() as conn:
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS idea_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS style_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS plot_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS emotion_reason VARCHAR(500);"))
        conn.execute(text("ALTER TABLE reviews ADD COLUMN IF NOT EXISTS influence_reason VARCHAR(500);"))
        conn.commit()

def view_reviews():
    session = Session()
    reviews = session.query(Review).all()
    if not reviews:
        print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.")
    else:
        for review in reviews:
            print(f"\nüìñ {review.title} ({review.author}) - {review.genre}")
            print(f"–û—Ü–µ–Ω–∫–∞: {review.final_score}/100")
            print(f"–û—Ü–µ–Ω–∏–ª: {review.evaluator} | –î–∞—Ç–∞: {review.review_date}")
    session.close()

def register_editor():
    session = Session()
    username = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω: ").strip()
    if not username:
        print("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        session.close()
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
    existing = session.query(Editor).filter_by(username=username).first()
    if existing:
        print("‚ùå –¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        session.close()
        return
    password = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
    if not password:
        print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        session.close()
        return
    password_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    new_editor = Editor(username=username, password_hash=password_hash)
    session.add(new_editor)
    try:
        session.commit()
        print("‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        session.rollback()
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e)
    session.close()

def login_editor(username, password):
    session = Session()
    editor = session.query(Editor).filter_by(username=username).first()
    if editor and bcrypt.checkpw(password.encode(), editor.password_hash.encode()):
        session.close()
        return True
    session.close()
    return False

def change_password_editor(username):
    session = Session()
    editor = session.query(Editor).filter_by(username=username).first()
    if not editor:
        print("‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        session.close()
        return
    current_password = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: ").strip()
    if not bcrypt.checkpw(current_password.encode(), editor.password_hash.encode()):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.")
        session.close()
        return
    new_password = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
    if not new_password:
        print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        session.close()
        return
    editor.password_hash = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt()).decode()
    try:
        session.commit()
        print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    except Exception as e:
        session.rollback()
        print("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:", e)
    session.close()
